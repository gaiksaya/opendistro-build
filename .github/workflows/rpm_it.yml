name: IT for RPM

on:
  repository_dispatch:
    types: [build-it]
  
jobs:
  Start-ES-Service:
    name: Test ISM Plugin
    runs-on: [self-hosted, Linux, X64, amazon]
    steps:
      - uses: actions/checkout@v1

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 14

      - name: Starting ES service
        run: |
          sudo curl https://d3g5vo6xdbdb9a.cloudfront.net/yum/opendistroforelasticsearch-artifacts.repo -o /etc/yum.repos.d/opendistroforelasticsearch-artifacts.repo
          cd /opt
          sudo yum install wget -y
          sudo wget https://download.java.net/java/GA/jdk13/5b8a42f3905b406298b72d750b6919f6/33/GPL/openjdk-13_linux-x64_bin.tar.gz
          sudo tar -xvf openjdk-13_linux-x64_bin.tar.gz
          export JAVA_HOME=/opt/jdk-13/
          export PATH=$PATH:/opt/jdk-13/bin
          sudo yum install unzip -y
          sudo yum install opendistroforelasticsearch-1.7.0 -y
          sudo chmod 777 /etc/elasticsearch/elasticsearch.yml    
          sudo /usr/share/elasticsearch/bin/elasticsearch-plugin remove opendistro_security 
          sudo sed -i /^opendistro_security/d /etc/elasticsearch/elasticsearch.yml
          sudo sed -i /CN=kirk/d /etc/elasticsearch/elasticsearch.yml
          sudo sed -i /^node.max_local_storage_nodes/d /etc/elasticsearch/elasticsearch.yml
          sudo sed -i /^cluster.routing.allocation.disk.threshold_enabled/d /etc/elasticsearch/elasticsearch.yml
          sudo systemctl start elasticsearch.service
          sleep 30
    
  Test-All-Plugins:
    needs: [Start-ES-Service]
    runs-on: [self-hosted, Linux, X64, amazon]
    steps:
      - name: Checking out ISM repo
        uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/index-management
          ref: opendistro-1.7
  
      - name: IT for ISM
        if: always()
        run: |
          cd $GITHUB_WORKSPACE/../index-management
          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200

      - name: Checking out Alerting repo
        if: always()
        uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/alerting
          ref: opendistro-1.7

      - name: IT for alerting
        if: always()
        run: |
          export JAVA_HOME=/opt/jdk-13/
          export PATH=$PATH:/opt/jdk-13/bin
          cd $GITHUB_WORKSPACE/../alerting
          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200

      - name: Checking out SQL repo
        if: always()
        uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/sql
          ref: opendistro-1.7
      
      - name: IT for SQL
        if: always()
        run: |
          export JAVA_HOME=/opt/jdk-13/
          export PATH=$PATH:/opt/jdk-13/bin
          cd $GITHUB_WORKSPACE/../sql
          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200

      - name: Checking out k-NN repo
        if: always()
        uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/k-NN
          ref: opendistro-1.7    
          
      - name: IT for KNN
        if: always()
        run: |
          export JAVA_HOME=/opt/jdk-13/
          export PATH=$PATH:/opt/jdk-13/bin
          cd $GITHUB_WORKSPACE/../k-NN
          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 
  
  Cleaning-Host:
    needs: [Test-All-Plugins]
    runs-on: ubuntu-latest
    steps:
      - name: Configuring AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Resetting the host runner
        run: |
          instanceid=`aws ec2 describe-instances --filters "Name=tag:Name,Values=odfeRpm" | grep InstanceId | cut -d ':' -f 2 | sed 's/[",]//g'`
          volumeid=`aws ec2 describe-instances --filters "Name=tag:Name,Values=odfe" | grep VolumeId | cut -d ':' -f 2 | sed 's/"//g'`
          az=`aws ec2 describe-instances --filters "Name=tag:Name,Values=odfe" | grep AvailabilityZone | cut -d ':' -f 2 | sed 's/[",]//g'`
          aws ec2 stop-instances --instance-ids $instanceid
          aws ec2 create-volume --snapshot snap-016e25334fa537e59 --availability-zone $az
          aws ec2 detach-volume --volume-id $volumeid
          aws ec2 delete-volume --volume-id $volumeid
          aws ec2 attach-volume --device /dev/xvda --instance-id $instanceid --volume-id $volumeid
          aws ec2 start-instances --instance-id $instanceid
          echo "Your Host Runner is as new now! Happy Rerunning the workflow"



