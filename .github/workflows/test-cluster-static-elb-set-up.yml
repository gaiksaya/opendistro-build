name: Create testing cluster

# Make sure to pass the distribution type and security feature as parameters
# { 
#  "distribution": "RPM/DEB/TAR",
#  "security": "enable/disable"
# }

on:
  repository_dispatch:
    types: [test-cluster-static-elb-set-up]

jobs:
  Create-Cluster:
    name: Create Testing cluster
    runs-on: ubuntu-latest
    # strategy:
    #     matrix:
    #       distribution: [ RPM, DEB ,TAR ]
    #       security: [ ENABLE, DISABLE ]

    steps:
      - uses: actions/checkout@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.STACK_KEY }}
          aws-secret-access-key: ${{ secrets.STACK_SECRET }}
          aws-region: us-west-2

      - name: Creating cluster
        run: |
            #!/bin/bash
            set -e

            distribution_type=`echo ${{github.event.client_payload.distribution}} | tr [:lower:] [:upper:]`
            security=`echo ${{github.event.client_payload.security}} | tr [:lower:] [:upper:]`
            echo $distribution_type $security
            stackName=ODFE-$distribution_type-SECURITY-$security

            existingStacks=`aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --query 'StackSummaries[*].StackName' --output text`

            for i in $existingStacks
            do
                if [[ $i = $stackName ]]
                then
                    echo "Stack already exists! Deleting the old stack"
                    aws cloudformation delete-stack --stack-name $stackName
                    aws cloudformation wait stack-delete-complete --stack-name $stackName
                    echo "$stackName deleted successfully!!"
                fi
            done
            
            .github/scripts/userdata.sh "$distribution_type" "$security"
            ls -ltr
            esTargetGroup=`aws elbv2 describe-target-groups --names ES-$distribution_type-SECURITY-$security --query TargetGroups[*].TargetGroupArn --output text`
            kibanaTargetGroup=`aws elbv2 describe-target-groups --names KIBANA-$distribution_type-SECURITY-$security --query TargetGroups[*].TargetGroupArn --output text`

            echo "Creating $stackName stack"

            aws cloudformation create-stack --stack-name $stackName \
            --template-body file://.github/templates/odfe-testing-cluster-static-elb-template.json \
            --parameters ParameterKey=userdata,ParameterValue=$(base64 -w0 userdata_$distribution_type.sh) \
            ParameterKey=distribution,ParameterValue=$distribution_type \
            ParameterKey=security,ParameterValue=$security \
            ParameterKey=vpcId,ParameterValue=${{secrets.VPCID}} \
            ParameterKey=ODFESecurityGroup,ParameterValue=${{secrets.ODFESECURITYGROUP}} \
            ParameterKey=keypair,ParameterValue=${{secrets.AWS_ODFE_TESTING_CLUSTER_KEYPAIR}} \
            ParameterKey=esTargetGroup,ParameterValue=$esTargetGroup \
            ParameterKey=kibanaTargetGroup,ParameterValue=$kibanaTargetGroup

            aws cloudformation wait stack-create-complete --stack-name $stackName
            sleep 60
            echo "################################################################################################"
            echo "Elasticsearch endpoint = `aws elbv2 describe-load-balancers --name ODFE-ES-$distribution_type-SECURITY-$security --query 'LoadBalancers[*].DNSName' --output text`"
            echo "################################################################################################"
            echo "Kibana endpoint = `aws elbv2 describe-load-balancers --name ODFE-KIBANA-$distribution_type-SECURITY-$security --query 'LoadBalancers[*].DNSName' --output text`"
            echo "################################################################################################"